/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import * as React from 'react'
import * as Drei from '@react-three/drei'
import { invalidate, useFrame, useThree } from '@react-three/fiber'

// @ts-ignore
type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh
  }
  materials: {
    ['Default OBJ']: THREE.MeshStandardMaterial
  }
}

export default function MiniModel({ ...props }: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>()
  const { nodes, materials } = Drei.useGLTF('/nasaEarthModel.glb') as GLTFResult
  useFrame(() => {
  })
  if (materials && nodes) {
    let mat = materials['Default OBJ']
    // console.log('bounding sphere for model geometry')
    // console.log(nodes.Cube001.geometry.boundingSphere)
    // console.log(nodes.Cube001.geometry.boundingBox)
    return (
      <group ref={group} {...props} dispose={null}>
        <mesh geometry={nodes.Cube001.geometry} material={mat} />
      </group>
    )
  } else {
    return (
      <>
      </>
    )
  }
 
}

Drei.useGLTF.preload('/nasaEarthModel.glb')