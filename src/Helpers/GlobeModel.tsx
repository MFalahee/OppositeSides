/*
--types--
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Akshat (https://sketchfab.com/shooter24994)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/earth-41fc80d85dfd480281f21b74b2de2faa
title: Earth
*/


import * as THREE from 'three'
import * as React from 'react'
import * as Drei from '@react-three/drei'
import { invalidate, useFrame } from '@react-three/fiber'
// @ts-ignore
type GLTFResult = GLTF & {
  nodes: {
    Sphere_Material002_0: THREE.Mesh
  }
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial
  }
}


// eventually maybe a resize function to make the globe bigger or smaller when the user hovers and mousewheels?
// Going to sync this with the slideshow component.
// Need to add "step" out of steps to the props in order to make the globe animate alongside the slideshow.
// Maybe add cool hover effects to the globe? Outline the globe with a glowy outline?
const GlobeModel: React.FC<JSX.IntrinsicElements['group']> = (props) => {
  const group = React.useRef<THREE.Group>()
  const { nodes, materials } = Drei.useGLTF('scene.gltf') as GLTFResult
  const [mode, setMode] = React.useState('normal')
  
  useFrame(() => {
    const location = window.location.pathname.toString()
    console.log(location);
    if (location === '/') {
      setMode('normal')
    } else if (location === '/go') {
      setMode('go')
    } 

    if (mode === 'normal') {
      if (group.current.position.y > -1.5) {
            group.current.position.y -= 0.004
              }
            group.current.rotation.x += 0.0005;
            invalidate();
    }
    if (mode === 'go') {
      if (group.current.position.y < -0.5) {
            group.current.position.y += 0.004
              }
            group.current.rotation.x += 0.0005;
            invalidate();
    }
  })
             

  if (nodes && materials) {
  return (
    <group ref={group} {...props} dispose={null}>
            <mesh geometry={nodes.Sphere_Material002_0.geometry} material={materials['Material.002']} onWheel={(e) => {
            }} />
          </group>
  )}
  else {
    return null
  } 
}

Drei.useGLTF.preload('scene.gltf')

export default GlobeModel;